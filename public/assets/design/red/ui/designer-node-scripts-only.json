[
{
    "name" : "sentiment",
        "category": "analysis-function",
        "color":"#E6E0F8",
        "defaults": {
            "name": {"value":""}
        },
        "inputs":1,
        "outputs":1,
        "icon": "arrow-in.png"
},
{
    "name" : "xml2js",
        "category": "advanced-function",
        "color":"#E6E0F8",
        "defaults": {
            "name": {"value":""}
        },
        "inputs":1,
        "outputs":1,
        "icon": "arrow-in.png"
},
{
"name" : "inject",
    "category": "input",
    "color":"#a6bbcf",
    "defaults": {
        "name": {"value":""},
        "topic": {"value":""},
        "payload": {"value":""},
        "payloadType": {"value":"date"},
        "repeat": {"value":""},
        "crontab": {"value":""},
        "once": {"value":false}
    },
    "inputs":0,
    "outputs":1,
    "icon": "inject.png"
},
{
    "name" : "debug",
        "category": "output",
        "defaults": {
            "name": {"value":""},
                    "active": {"value":true},
    "complete": {"value":false}
    },
    "color":"#87a980",
            "inputs":1,
            "outputs":0,
            "icon": "debug.png",
            "align": "right"
},
{
    "name" : "exec",
        "category": "advanced-function",
        "color":"darksalmon",
        "defaults": {
            "command": {"value":"","required":true},
            "append": {"value":""},
            "useSpawn": {"value":""},
            "name": {"value":""}
        },
        "inputs":1,
        "outputs":3,
        "icon": "arrow-in.png",
        "align": "right"
},
{
    "name" : "function",
        "color":"#fdd0a2",
        "category": "function",
        "defaults": {
            "name": {"value":""},
            "func": {"value":"return msg;"},
            "outputs": {"value":1}
        },
        "inputs":1,
        "outputs":1,
        "icon": "function.png"
},
{
    "name" : "template",
        "color":"rgb(243, 181, 103)",
        "category": "function",
        "defaults": {
            "name": {"value":""},
            "template": {"value":"This is the 'payload': {{payload}}!"}
        },
        "inputs":1,
        "outputs":1,
        "icon": "template.png"
},
{
    "name" : "delay",
        "category": "function",
        "color":"#E6E0F8",
        "schema" : {
            "type": "object",
            "properties": {
                "phoneNumber": {
                    "type": "string"
                },
                "plivoAuthId": {
                    "type": "string"
                },
                "plivoAuthToken": {
                    "type": "string",
                    "required": true
                }
            }
        },

        "defaults": {             
            "name": {"value":""},   
            "pauseType": {"value":"delay", "required":true},
            "timeout": {"value":"5", "required":true},
            "timeoutUnits": {"value":"seconds"},
            "rate": {"value":"1", "required":true},
            "rateUnits": {"value": "second"},
            "randomFirst": {"value":"1", "required":true },
            "randomLast": {"value":"5", "required":true},
            "randomUnits": {"value": "seconds"}
        },
        "inputs":1,                
        "outputs":1,               
        "icon": "timer.png"    
},
{
    "name" : "comment",
        "category": "function",
        "color":"#ffffff",
        "defaults": {
            "name": {"value":""},
            "info": {"value":""}
        },
        "inputs":0,
        "outputs":0,
        "icon": "file.png"
},
{
    "name" : "unknown",
        "category": "unknown",
        "color":"#fff0f0",
        "defaults": {
            "name": {"value":""}
        },
        "inputs":1,
        "outputs":1,
        "icon": ""
},
{
    "name" : "mqtt in",
        "category": "input",
        "defaults": {
            "name": {"value":""},
            "topic": {"value":"","required":true},
            "broker": {"type":"mqtt-broker", "required":true}
        },
        "color":"#d8bfd8",
        "inputs":0,
        "outputs":1,
        "icon": "bridge.png"
},
{
    "name" : "mqtt out",
        "category": "output",
        "defaults": {
            "name": {"value":""},
            "topic": {"value":""},
            "broker": {"type":"mqtt-broker", "required":true}
        },
        "color":"#d8bfd8",
        "inputs":1,
        "outputs":0,
        "icon": "bridge.png",
        "align": "right"
},
{
    "name" : "mqtt-broker",
        "category": "config",
        "defaults": {
            "broker": {"value":"localhost","required":true},
            "port": {"value":1883,"required":true},
            "clientid": { "value":"" }
        }
},
{
    "name" : "http in",
        "category": "input",
        "color":"rgb(231, 231, 174)",
        "defaults": {
            "name": {"value":""},
            "url": {"value":"","required":true},
            "method": {"value":"get","required":true}
        },
        "inputs":0,
        "outputs":1,
        "icon": "white-globe.png"
},
{
    "name" : "http response",
        "category": "output",
        "color":"rgb(231, 231, 174)",
        "defaults": {
            "name": {"value":""}
        },
        "inputs":1,
        "outputs":0,
        "align": "right",
        "icon": "white-globe.png"
},
{
    "name" : "http request",
        "category": "function",
        "color":"rgb(231, 231, 174)",
        "defaults": {
            "name": {"value":""},
            "method":{"value":"GET"},
            "url":{"value":""},
        },
        "inputs":1,
        "outputs":1,
        "align": "right",
        "icon": "white-globe.png"
},
{
    "name" : "websocket in",
        "category": "input",
        "defaults": {
            "name": {"value":""},
            "server": {"type":"websocket-listener"}
        },
        "color":"rgb(215, 215, 160)",
        "inputs":0,
        "outputs":1,
        "icon": "white-globe.png"
},
{
    "name" : "websocket out",
        "category": "output",
        "defaults": {
            "name": {"value":""},
            "server": {"type":"websocket-listener", "required":true}
        },
        "color":"rgb(215, 215, 160)",
        "inputs":1,
        "outputs":0,
        "icon": "white-globe.png",
        "align": "right"
},
{
    "name" : "websocket-listener",
        "category": "config",
        "defaults": {
            "path": {"value":"","required":true },
            "wholemsg": {"value":"false"}
        },
        "inputs":0,
        "outputs":0
},
{
    "name" : "tcp in",
        "category": "input",
        "color":"Silver",
        "defaults": {
            "server": {"value":"server","required":true},
            "host": {"value":""},
            "port": {"value":"","required":true},
            "datamode":{"value":"stream"},
            "datatype":{"value":"buffer"},
            "newline":{"value":""},
            "topic": {"value":""},
            "name": {"value":""}
        },
        "inputs":0,
        "outputs":1,
        "icon": "bridge-dash.png",
},
{
    "name" : "tcp out",
        "category": "output",
        "color":"Silver",
        "defaults": {
            "host": {"value":"" },
            "port": {"value":""},
            "beserver": {"value":"client","required":true},
            "base64": {"value":false,"required":true},
            "name": {"value":""}
        },
        "inputs":1,
        "outputs":0,
        "icon": "bridge-dash.png",
        "align": "right"
},
{
    "name" : "udp in",
        "category": "input",
        "color":"Silver",
        "defaults": {
            "name": {"value":""},
            "iface": {"value":""},
            "port": {"value":"","required":true},
            "datatype": {"value":"buffer","required":true},
            "multicast": {"value":"false"},
            "group": {"value":"" }
        },
        "inputs":0,
        "outputs":1,
        "icon": "bridge-dash.png"
},
{
    "name" : "udp out",
        "category": "output",
        "color":"Silver",
        "defaults": {
            "name": {"value":""},
            "addr": {"value":""},
            "iface": {"value":""},
            "port": {"value":""},
            "outport": {"value":""},
            "base64": {"value":false,"required":true},
            "multicast": {"value":"false"}
        },
        "inputs":1,
        "outputs":0,
        "icon": "bridge-dash.png",
        "align": "right"
},
{
    "name": "switch",
        "color": "#E2D96E",
        "category": "function",
        "defaults": {
            "name": {"value":""},
            "property": {"value":"payload", "required":true},
            "rules": {"value":[{"t":"eq", "v":""}]},
            "checkall": {"value":"true", "required":true},
            "outputs": {"value":1}
        },
        "inputs": 1,
        "outputs": 1,
        "icon": "switch.png"
},
{
    "name":"change",
        "color": "#E2D96E",
        "category": "function",
        "defaults": {
            "action": {"value":"replace","required":true},
            "property": {"value":"payload","required":true},
            "from": {"value":"","validate": function(v) {
                if (this.action == "change" && this.reg) {
                    try {
                        var re = new RegExp(this.from, "g");
                        return true;
                    } catch(err) {
                        return false;
                    }
                }
                return true;
            }},
            "to": {"value":""},
            "reg": {"value":false},
            "name": {"value":""}
        },
        "inputs": 1,
        "outputs": 1,
        "icon": "swap.png",
        "label": function() {
            if (this.name) {
                return this.name;
            }
            if (this.action == "replace") {
                return "set msg."+this.property;
            } else {
                return this.action+" msg."+this.property
            }
        },
        "labelStyle": function() {
            return this.name ? "node_label_italic" : "";
        },
        "oneditprepare": function() {
            if (this.reg === null) { $("#node-input-reg").prop("checked", true); }
            $("#node-input-action").change( function() {
                var a = $("#node-input-action").val();
                if (a === "replace") {
                    $("#node-input-todo").html("called");
                    
                    $("#node-input-t").html("to");
                    $("#node-from-row").hide();
                    $("#node-to-row").show();
                    $("#node-reg-row").hide();
                    $("#node-tip").show();
                    $("#node-tip").html(""Tip": expects a new property name and either a fixed value OR the full name of another message property "eg": msg.sentiment.score");
                }
                if (a === "delete") {
                    $("#node-input-todo").html("called");
                    
                    
                    $("#node-from-row").hide();
                    $("#node-to-row").hide();
                    $("#node-reg-row").hide();
                    $("#node-tip").hide();
                }
                if (a === "change") {
                    $("#node-input-todo").html("called");
                    $("#node-input-f").html("Search for");
                    $("#node-input-t").html("replace with");
                    $("#node-from-row").show();
                    $("#node-to-row").show();
                    $("#node-reg-row").show();
                    $("#node-tip").show();
                    $("#node-tip").html(""Tip": only works on string properties. If regular expressions are used, the <i>replace with</i> field can contain capture results, eg $1.");
                }
                
                
                
                
                
                
                
                
            
            $("#node-input-action").change();
        }
    
},
{
    RED.nodes.registerType("range", {
        "color": "#E2D96E",
        "category": "function",
        "defaults": {
            "minin": {"value":"","required":true,"validate":RED.validators.number()},
            "maxin": {"value":"","required":true,"validate":RED.validators.number()},
            "minout": {"value":"","required":true,"validate":RED.validators.number()},
            "maxout": {"value":"","required":true,"validate":RED.validators.number()},
            "action": {"value":"scale"},
            "round": {"value":false},
            "name": {"value":""}
        },
        "inputs": 1,
        "outputs": 1,
        "icon": "range.png",
        "label": function() {
            return this.name || "range";
        },
        "labelStyle": function() {
            return this.name ? "node_label_italic" : "";
        }
    
},
{

    var uuid;

    document.cookie.split(";").forEach(function (cookie) {
        var sp = cookie.split("=");
        if (sp[0].trim() === "skynetuuid"){
            uuid = sp[1].trim();
        }
    

    if(!uuid){
        RED.rpc("skynetWhoami", this.id, function(err,data) {
            console.log("skynetWhoami", err, data);
            if(data && data.uuid){
                uuid = data.uuid;
            }
        
    }else{
        console.log("uuid", uuid);
    }

    if ((""+location).indexOf("octoblu") >= 0) document.domain = "octoblu.com"

    "name" : "device in",
        "category": "skynet",
        "defaults": {
            "name": {"value":""},
            
            "device": {"type":"skynet-device", "value":null, "required": false},
            "directToMe": {"value": false}
        },
        "color":"#e05a54",
        "inputs":0,
        "outputs":1,
        "icon": "bridge.png",
        "label": getLabel,
        "labelStyle": function() {
            return this.name?"node_label_italic":"";
        },
        "oneditprepare": function() {
            console.log("uuid", uuid);
            getSkynetDevices.call(this);
            $("#node-span-directToMe-uuid").html(uuid);

            function showDevice(){
                $( "#node-div-deviceRow" ).show();
            }
            function hideDevice(){
                $( "#node-div-deviceRow" ).hide();
            }

            var directToMe = $( "#node-input-directToMe" );
            directToMe.change(function(){
                console.log("directToMe checked", this.checked);
                if(this.checked){
                    hideDevice();
                }else{
                    showDevice();
                }
            

            if(this.directToMe){
                directToMe.checked = "checked";
                hideDevice();
            }
            else{
                directToMe.checked = "";
                showDevice();
            }

        },
        "oneditsave": function(a) {
            var direct = $( "#node-input-outputs" );
            if(direct.checked == "checked" ){
                this.directToMe = true;
            }else{
                this.directToMe = false;
            }
            console.log("saving", this, a);
        }
    

    "name" : "device out",
        "category": "skynet",
        "defaults": {
            "name": {"value":""},
            "device": {"type":"skynet-device", "value":null},
            "outputs": {"value":0},
            "broadcast": {"value": false}
        },
        "color":"#e05a54",
        "inputs":1,
        "outputs":0,
        "icon": "bridge.png",
        "align": "right",
        "label": getLabel,
        "labelStyle": function() {
            return this.name?"node_label_italic":"";
        },
        "oneditprepare": function() {
            getSkynetDevices.call(this);

            var inout = $( "#node-input-outputs" );
            if(this.outputs){
                inout.checked = "checked";
            }
            else{
                inout.checked = "";
            }

            function showDevice(){
                $( "#node-div-deviceRow" ).show();
                $( "#node-div-outputsRow" ).show();
            }
            function hideDevice(){
                $( "#node-div-deviceRow" ).hide();
                $( "#node-div-outputsRow" ).hide();
            }

            var broadcast = $( "#node-input-broadcast" );
            broadcast.change(function(){
                console.log("broadcast checked", this.checked);
                if(this.checked){
                    hideDevice();
                }else{
                    showDevice();
                }
            

            if(this.broadcast){
                broadcast.checked = "checked";
                hideDevice();
            }
            else{
                broadcast.checked = "";
                showDevice();
            }
        },
        "oneditsave": function(a) {
            var inout = $( "#node-input-outputs" );
            if(inout.checked == "checked" ){
                this.outputs = 1;
            }else{
                this.outputs = 0;
            }

            var broadcast = $( "#node-input-broadcast" );
            if(broadcast.checked == "checked" ){
                this.broadcast = true;
            }else{
                this.broadcast = false;
            }

            console.log("saving", this, a);
        }

    




    function getSkynetDevices () {
        var node = this;
        RED.rpc("skynetDevices", this.id, function(err,data) {
            if (err) {
                
            } else{
                if (data && data.devices) {
                    var newDeviceIds = data.devices.map(getter("uuid"))
                    RED.nodes.eachConfig(function (config) {
                        if (config.dne && newDeviceIds.indexOf(config.id) === -1) RED.nodes.remove(config.id)
                    })

                    RED.nodes.import(data.devices.map(function (device) {
                        return {"id": device.uuid, "uuid": device.uuid, "token": device.token, "name": device.name, "dne":true, "type": "skynet-device"}
                    }))
                    RED.editor.updateConfigNodeSelect("device", "skynet-device", node.device)
                }
            }
        
    }

    function getLabel () {
        if(this.directToMe){
            return this.name||"me";
        }else{
            var device = RED.nodes.node(this.device);
            return this.name||(device && device.name)||"device";
        }

    }

    function getter (prop) {
        return function (obj) {
            return obj[prop]
        }
    }
},
{
    /*
     {"_id":"hex"
     ,"channel":"main"
     ,"name":"arduino"
     ,"online":false
     ,"owner":"owner-uuid"
     ,"socketId":"random"
     ,"timestamp":1390934674113
     ,"token":"token"
     ,"uuid":"device-uuid"
     ,"$$hashKey":"xxx"
     }
     */

    "name" : "skynet-device",
        "category": "config",
        "defaults": {
            "uuid": {"value":"","required":true},
            "token": {"value":"", "priv": true},
            "name": {"value":""},
            "dne": {"value":""}
        },
        "label": function() {
            return this.name || this.uuid;
        },
        "oneditprepare": function() {
            if (this.dne) {
                ;["uuid", "name", "token"].forEach(function (field) {
                    document.getElementById("node-config-input-"+field).disabled = true
                })
                document.getElementById("node-config-input-dne").value = "true"
            }
        },
        "oneditsave": function() {
        },
        "ondelete": function() {
        }
    
},
{
"name" : "channel",
    "category": "skynet",
    "color":"rgb(133, 180, 230)",
    "defaults": {
        "name": {"value": "none"},
        "channelid": {"value": "none"},
        "uuid": {"value": "none"},
        "token": {"value": "none"},
        "api": {"value":"none"},
        "endpoint":{"value":"none"},
        "body":{"value":""},
        seg0:{"value":""},
        seg1:{"value":""},
        seg2:{"value":""},
        seg3:{"value":""},
        "query": {"type":"query"},
        "header": {"type":"header"},
        "apicreds": {"type":"apicreds"},
        
        "method":{"value":"GET"}
    },
    "inputs":1,
    "outputs":1,
    "align": "right",
    "icon": "white-globe.png",
    "label": function() {
        return this.name||"channel";
    },
    "labelStyle": function() {
        return this.name?"node_label_italic":"";
    },
    "oneditprepare": findAPIs


var apis =
{ "none":
{ "application":
{ "resources": [{"path": "Register apis in the connections tab!"}]
}
    , "basepath": "none"
}
};
var credentials = {};

function getCookie(k){return(document.cookie.match("(^|; )"+k+"=([^;]*)")||0)[2]}

var apiBase = ""http":
if (window.location.hostname === "localhost") {
    apiBase = ""http":
}

function findAPIs (a) {
    var node = this;
    var activeApi = this.api
            , activeEndpoint = this.endpoint;

    var skynetuuid = getCookie("skynetuuid"),
            skynettoken = getCookie("skynettoken");

    node.token = skynettoken;
    node.uuid = skynetuuid;

    $(".api-seg").hide();
    
    document.getElementById("node-input-method").disabled = true
    $("#node-input-api").change(function() {
        var channelname = $("#node-input-api "option":selected").text();
        var channelid = $("#node-input-api "option":selected").val();
        if(!apis[channelid] || !apis[channelid].documentation) {
            $("#channelDocumentation").hide();
            $("#channelDocumentation").attr("href","#");
        }
        else {
            $("#channelDocumentation").show();
            $("#channelDocumentation").attr("href",apis[channelid].documentation);
        }
        node.name = channelname;
        
        RED.editor.updateConfigNodeSelect("apicreds", "apicreds", "api-"+channelid);
        
        $("#node-input-endpoint").empty();
        if(apis[channelid]) {
            apis[channelid].application.resources.sort(function(a,b) {return !a.path || a.path.localeCompare(b.path);}).forEach(function (resource) {
                if(resource.disabled && resource.disabled==true) {return;}
                var name = resource.httpMethod + " " + resource.path
                if(activeEndpoint && activeEndpoint==name) {
                    $("#node-input-endpoint").append("<option value="" + name +"" selected="selected">" + name + "</option>");
                } else {
                    $("#node-input-endpoint").append("<option value="" + name +"">" + name + "</option>");
                }
            })
            $("#node-input-endpoint").change();
        }
    })

    $("#node-input-endpoint").change(function() {
        var channelname = $("#node-input-api "option":selected").text();
        var channelid = $("#node-input-api "option":selected").val();
        var path = $("#node-input-endpoint "option":selected").val();
        if(!apis[channelid]) return;
        var resource = apis[channelid].application.resources.filter(function (resource) {
            return (resource.httpMethod + " " + resource.path) === path;
        })[0];
        $(".api-seg").hide();
        if(resource && resource.doc && resource.doc.url) {
            $("#endpointDocumentation").show();
            $("#endpointDocumentation").attr("href",resource.doc.url);

        } else {
            $("#endpointDocumentation").hide();
            $("#endpointDocumentation").attr("href","#");
        }
        var num = 0;
        path.split("/").forEach(function (seg) {
            seg = seg.trim();
            if(seg==="") return;
            if (seg[0] === "{") {
                var name = seg.slice(1), id = "seg" + num++;
                if(name.indexOf("}")) {
                    name = name.substring(0, name.indexOf("}"));
                }
                $("#"+id +" label").html("<i class="icon-tasks"></i> " + name);
                $("#"+id).show();

            } else if (seg[0] === ":") {
                var name = seg.slice(1), id = "seg" + num++;
                $("#"+id +" label").html("<i class="icon-tasks"></i> " + name);
                $("#"+id).show();
            }
        
        document.getElementById("node-input-method").value = resource.httpMethod || "GET";
    })

    
    function fire () {
        $("#node-input-api").empty();
        Object.keys(apis).sort(function(a, b) {return !apis[a].name || apis[a].name.localeCompare(apis[b].name);}).forEach(function (id) {
            if(!apis[id] || !apis[id].name) return;
            $("#node-input-api").append(
                            "<option value="" + apis[id]._id +"">" + apis[id].name + "</option>"
            )
        })
        $("#node-input-api option[value="" + activeApi + ""]").attr("selected", "selected");
        $("#node-input-api").change();
        $("#node-input-endpoint option[value="" + activeEndpoint + ""]:first").attr("selected", "selected");
        $("#node-input-endpoint").change();
    }

    fire();

    var user_url = apiBase + "/api/user";
    console.log("about to request user data...");
    $.ajax({
        "url": user_url,
        "async": false,
        "data": { },
        "type": "GET",
        "beforeSend": function(xhr){
            xhr.setRequestHeader("skynet_auth_uuid", skynetuuid);
            xhr.setRequestHeader("skynet_auth_token", skynettoken);
        },
        "success": function (data) {
            if (data && data.api) {
                RED.nodes.import(data.api.map(function (api) {
                    return {"id": "api-"+api.channelid, "token": api.token, "name": api.name||api.channelid, "key": api.key, "secret": api.secret, "type": "apicreds"}
                }));
                RED.editor.updateConfigNodeSelect("apicreds", "apicreds", node.apicreds);
                data.api.forEach(function(api) {
                    if(!api.channelid) return;
                    var name = api.name || api.channelid;
                    if (api.channelid in apis) return;
                    var channelUrl = apiBase + "/api/channels/" + api.channelid;
                    $.ajax({
                        "url": channelUrl,
                        "async": true,
                        "data": { },
                        "type": "GET",
                        "beforeSend": function(xhr){
                            xhr.setRequestHeader("skynet_auth_uuid", skynetuuid);
                            xhr.setRequestHeader("skynet_auth_token", skynettoken);
                        },
                        "success": function (data) {
                            if (data._id in apis || data.enabled==false) return;
                            apis[data._id] = data;
                            credentials[data.name] = api;
                            fire();
                        }
                
            }
        }
    
}

RED.nodes.registerType("query",
        { "category": "config"
            , "defaults": genericDef(10)
            , "label": function () {
            return this.name || "Unnamed Query Object";
        }
        }
)

RED.nodes.registerType("apicreds",
        { "category": "config"
            , "defaults": {"key": {"value": ""}, "token": {"value": ""}, "secret": {"value": ""}, "name": {"value": ""}}
            , "exportable": false
            , "label": function () {
            return this.name || "Unnamed Api Creds";
        }
        }
)

RED.nodes.registerType("header",
        { "category": "config"
            , "defaults": genericDef(10)
            , "label": function () {
            return this.name || "Unnamed Header Object";
        }
        }

)

function genericDef (size) {
    var def = { "name": { "value": "" }}
    while (size--) {
        def["key" + size] = { "value": ""}
        def["val" + size] = { "value": ""}
    }
    return def;
}

},
{

    "name" : "microblu in",
        "category": "advanced-input",
        "color":"#3fadb5",
        "defaults": {
            "name": {"value":""},
            "pin": {"value":"","required":true},
            "state": {"value":"INPUT","required":true},
            "skynetFirmware": {"type":"skynet-device", "value": null, "required":true}
        },
        "inputs":0,
        "outputs":1,
        "icon": "arduino.png"

    "name" : "microblu out",
        "category": "advanced-output",
        "color":"#3fadb5",
        "defaults": {
            "name": {"value":""},
            "pin": {"value":""},
            "state": {"value":"","required":true},
            "skynetFirmware": {"type":"skynet-device", "value": null, "required":true}
        },
        "inputs":1,
        "outputs":0,
        "icon": "arduino.png",
        "align": "right",
},
{
    "name" : "twitter-credentials",
        "category": "config",
        "defaults": {
            "screen_name": {"value":""},
            "access_token": {"value": ""},
            "access_token_secret": {"value":""}
        }
        "exportable": false
},
{
    "name" : "twitter in",
        "category": "social-input",
        "color":"#C0DEED",
        "defaults": {
            "twitter": {"type":"twitter-credentials","required":true},
            "user": {"value":"false","required":true},
            "name": {"value":""},
            "topic": {"value":"tweets"}
        },
        "inputs":0,
        "outputs":1,
        "icon": "twitter.png",
},
{
    "name" : "twitter out",
        "category": "social-output",
        "color":"#C0DEED",
        "defaults": {
            "twitter": {"type":"twitter-credentials","required":true},
            "name": {"value":"Tweet"}
        },
        "inputs":1,
        "outputs":0,
        "icon": "twitter.png",
        "align": "right"
},
{
        "name" : "e-mail",
            "category": "social-output",
            "color":"#c7e9c0",
            "defaults": {
                "server": {"value":"smtp.gmail.com","required":true},
                "port": {"value":"465","required":true},
                "name": {"value":"","required":true},
                "dname": {"value":""}
            },
            "inputs":1,
            "outputs":0,
            "icon": "envelope.png",
            "align": "right"
},
{
        "name" : "e-mail in",
            "category": "social-input",
            "color":"#c7e9c0",
            "defaults": {
                "repeat": {"value":"300","required":true},
                "server": {"value":"imap.gmail.com","required":true},
                "port": {"value":"993","required":true},
                "name": {"value":""}
            },
            "inputs":0,
            "outputs":1,
            "icon": "envelope.png"
},
{
    "name" : "irc in",
        "category": "social-input",
        "defaults": {
            "name": {"value":""},
            "ircserver": {"type":"irc-server", "required":true},
            "channel": {"value":"","required":true}
        },
        "color":"Silver",
        "inputs":0,
        "outputs":2,
        "icon": "hash.png"
},
{
    "name" : "irc out",
        "category": "social-output",
        "defaults": {
            "name": {"value":""},
            "sendObject": {"value":"pay", "required":true},
            "ircserver": {"type":"irc-server", "required":true},
            "channel": {"value":"","required":true}
        },
        "color":"Silver",
        "inputs":1,
        "outputs":0,
        "icon": "hash.png",
        "align": "right",
},
{
    "name" : "irc-server",
        "category": "config",
        "defaults": {
            "server": {"value":"","required":true},
            "nickname": {"value":"","required":true}
        },
},
{
    "name" : "tail",
        "category": "storage-input",
        "defaults": {
            "name": {"value":""},
            "split": {"value":false},
            "filename": {"value":"","required":true}
        },
        "color":"BurlyWood",
        "inputs":0,
        "outputs":1,
        "icon": "file.png",
},
{
    "name" : "file",
        "category": "storage-output",
        "defaults": {
            "name": {"value":""},
            "filename": {"value":""},
            "appendNewline": {"value":true},
            "overwriteFile": {"value":false}
        },
        "color":"BurlyWood",
        "inputs":1,
        "outputs":0,
        "icon": "file.png",
        "align": "right",
}
]
